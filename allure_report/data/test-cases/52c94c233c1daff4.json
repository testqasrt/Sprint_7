{"uid":"52c94c233c1daff4","name":"Логин курьера без обязательных ключей в теле запроса","fullName":"tests.test_login_courier.TestLoginCourier#test_login_without_required_key","historyId":"79fe327409b9926c60f858dc8503b479","time":{"start":1726038034224,"stop":1726038094287,"duration":60063},"status":"failed","statusMessage":"AssertionError: assert 504 == <HTTPStatus.BAD_REQUEST: 400>\n +  where 504 = <Response [504]>.status_code\n +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST","statusTrace":"self = <test_login_courier.TestLoginCourier object at 0x10438ed00>, request = <FixtureRequest for <Function test_login_without_required_key[user_data_without_password]>>\nclient = <qa_scooter_client.QAScooterClient object at 0x1043e0ca0>, data = 'user_data_without_password'\n\n    @allure.title('Логин курьера без обязательных ключей в теле запроса')\n    @pytest.mark.parametrize(\n        'data',\n        ('user_data_without_password', 'user_data_without_login')\n    )\n    def test_login_without_required_key(self, request, client, data):\n        response = client.post_login(data=request.getfixturevalue(data))\n>       assert response.status_code == HTTPStatus.BAD_REQUEST\nE       assert 504 == <HTTPStatus.BAD_REQUEST: 400>\nE        +  where 504 = <Response [504]>.status_code\nE        +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST\n\ntests/test_login_courier.py:62: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"user_data_without_password","time":{"start":1726038034224,"stop":1726038034225,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"client","time":{"start":1726038034224,"stop":1726038034224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false},{"name":"user_data","time":{"start":1726038034224,"stop":1726038034224,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert 504 == <HTTPStatus.BAD_REQUEST: 400>\n +  where 504 = <Response [504]>.status_code\n +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST","statusTrace":"self = <test_login_courier.TestLoginCourier object at 0x10438ed00>, request = <FixtureRequest for <Function test_login_without_required_key[user_data_without_password]>>\nclient = <qa_scooter_client.QAScooterClient object at 0x1043e0ca0>, data = 'user_data_without_password'\n\n    @allure.title('Логин курьера без обязательных ключей в теле запроса')\n    @pytest.mark.parametrize(\n        'data',\n        ('user_data_without_password', 'user_data_without_login')\n    )\n    def test_login_without_required_key(self, request, client, data):\n        response = client.post_login(data=request.getfixturevalue(data))\n>       assert response.status_code == HTTPStatus.BAD_REQUEST\nE       assert 504 == <HTTPStatus.BAD_REQUEST: 400>\nE        +  where 504 = <Response [504]>.status_code\nE        +  and   <HTTPStatus.BAD_REQUEST: 400> = HTTPStatus.BAD_REQUEST\n\ntests/test_login_courier.py:62: AssertionError","steps":[{"name":"Вызвать метод POST v1/courier/login","time":{"start":1726038034225,"stop":1726038094285,"duration":60060},"status":"passed","steps":[],"attachments":[],"parameters":[{"name":"params","value":"None"},{"name":"data","value":"{'login': 'sdfg'}"}],"shouldDisplayMessage":false,"attachmentsCount":0,"attachmentStep":false,"stepsCount":0,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"attachmentStep":false,"stepsCount":1,"hasContent":true},"afterStages":[],"labels":[{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_login_courier"},{"name":"subSuite","value":"TestLoginCourier"},{"name":"host","value":"MacBook-Pro-Aleksandr.local"},{"name":"thread","value":"21548-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_login_courier"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"data","value":"'user_data_without_password'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"52c94c233c1daff4.json","parameterValues":["'user_data_without_password'"]}